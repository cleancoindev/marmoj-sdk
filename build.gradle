plugins {
    id "java"
    id "org.web3j" version "0.1.6"
    id 'java-library'
    id "maven-publish"
    id 'signing'
}

group "network.marmoj"
version "0.1.0"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

web3j {
    generatedPackageName = "network.marmoj.contracts"
    excludedContracts = [""]
}

ext {
    web3jVersion = "4.0.3"
    springBootVersion = "2.1.1.RELEASE"
    logbackVersion = "1.2.3"
    junitVersion = "4.12"
}

dependencies {
    compile "org.web3j:core:$web3jVersion"
    compile group: 'org.asynchttpclient', name: 'async-http-client', version: '2.6.0'
    compile "ch.qos.logback:logback-core:$logbackVersion",
            "ch.qos.logback:logback-classic:$logbackVersion"
    testCompile "junit:junit:$junitVersion"
}

configurations {
    testRuntimeClasspath.exclude module: "logback-classic"
    testCompileClasspath.exclude module: "logback-classic"
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'network.marmoj'
            artifactId 'core'
            version '0.1.0'

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Marmo wallet JAVA SDK'
            name 'Marmo Java'
            url 'https://github.com/ripio/marmoj-sdk'
            organization {
                name 'network.marmoj'
                url 'https://github.com/ripio'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/ripio/marmoj-sdk/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/ripio/marmoj-sdk/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/ripio/marmoj-sdk/issues'
                connection 'scm:git:git@github.com:ripio/marmoj-sdk.git'
                developerConnection 'scm:git:ssh://git@github.com:ripio/marmoj-sdk.git'
            }
            developers {
                developer {
                    name 'RCN Team'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}